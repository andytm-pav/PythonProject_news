import os
import sys
import time
import requests
import feedparser
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import warnings
import joblib
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.linear_model import BayesianRidge
from sklearn.preprocessing import RobustScaler
from sklearn.impute import SimpleImputer
import re
import threading
from flask import Flask, render_template_string, request
import json
import traceback
from scipy.optimize import minimize

warnings.filterwarnings('ignore')

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
RUSSIAN_SECTORS = {
    '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞': ['GAZP', 'LKOH', 'ROSN', 'SNGS', 'TATN'],
    '–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–π': ['ALRS', 'CHMK', 'MTLR', 'TRNFP'],
    '–ë–∞–∑–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã': ['GMKN', 'NLMK', 'MAGN', 'PLZL', 'RUAL'],
    '–†–æ–∑–Ω–∏—á–Ω–∞—è –∏ –æ–ø—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è': ['FIVE', 'DSKY', 'LNTA', 'OZON'],
    '–ú–µ–¥–∏—Ü–∏–Ω–∞, —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–∞, –æ—Ö—Ä–∞–Ω–∞ –∑–¥–æ—Ä–æ–≤—å—è': ['POLY', 'RGSS', 'YNDX'],
    '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π': ['GCHE', 'UPRO', 'WUSH'],
    '–¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏': ['MTSS', 'RTKM', 'MGNT'],
    '–•–∏–º–∏—è –∏ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—è': ['PHOR', 'AKRN', 'ODVA'],
    '–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞': ['FEES', 'HYDR', 'IRAO'],
    '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ': ['PIKK', 'LSRG', 'UNAC'],
    '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': ['AFLT', 'NMTP', 'TRMK']
}

def load_russian_feeds_from_json(file_path='russian_feeds.json'):
    """–ó–∞–≥—Ä—É–∑–∫–∞ RSS-–ª–µ–Ω—Ç –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                feeds = json.load(f)
            print(f"‚úÖ RSS-–ª–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {file_path}")
            return feeds
        else:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ª–µ–Ω—Ç–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            default_feeds = {
                #"–í–µ–¥–æ–º–æ—Å—Ç–∏": "https://www.vedomosti.ru/rss/news",
                #"–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç": "https://www.kommersant.ru/RSS/news.xml",
                #"–ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å": "https://www.interfax.ru/rss.asp",
                #"–¢–ê–°–°": "https://tass.ru/rss/v2.xml",
                #"–õ–µ–Ω—Ç–∞.—Ä—É": "https://lenta.ru/rss/news",
                #"–§–∏–Ω–∞–º": "https://www.finam.ru/analysis/conews/rsspoint/",
                #"–ë–§–ú": "https://www.bfm.ru/news.rss?rubric=19",
                #"–§–∏–Ω–ú–∞—Ä–∫–µ—Ç": "https://www.finmarket.ru/rss/mainnews.asp"
            }
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(default_feeds, f, ensure_ascii=False, indent=2)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {file_path} —Å RSS-–ª–µ–Ω—Ç–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return default_feeds
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RSS-–ª–µ–Ω—Ç: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–µ–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            "–í–µ–¥–æ–º–æ—Å—Ç–∏": "https://www.vedomosti.ru/rss/news",
            "–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç": "https://www.kommersant.ru/RSS/news.xml",
            "–ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å": "https://www.interfax.ru/rss.asp",
            "–¢–ê–°–°": "https://tass.ru/rss/v2.xml",
            "–õ–µ–Ω—Ç–∞.—Ä—É": "https://lenta.ru/rss/news",
            "–§–∏–Ω–∞–º": "https://www.finam.ru/analysis/conews/rsspoint/",
            "–ë–§–ú": "https://www.bfm.ru/news.rss?rubric=19",
            "–§–∏–Ω–ú–∞—Ä–∫–µ—Ç": "https://www.finmarket.ru/rss/mainnews.asp"
        }

# –ó–∞–≥—Ä—É–∂–∞–µ–º RSS-–ª–µ–Ω—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–∞
RUSSIAN_FEEDS = load_russian_feeds_from_json()

# ==================== –ö–õ–ê–°–° –î–õ–Ø –°–ë–û–†–ê –ù–û–í–û–°–¢–ï–ô ====================
class NewsCollector:
    def __init__(self, feeds_config=None):
        self.feeds = feeds_config if feeds_config is not None else RUSSIAN_FEEDS
        self.feeds_file = 'russian_feeds.json'
        self._ensure_feeds_file()

    def _ensure_feeds_file(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å RSS-–ª–µ–Ω—Ç–∞–º–∏"""
        if not os.path.exists(self.feeds_file):
            print(f"üìÅ –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª {self.feeds_file} —Å RSS-–ª–µ–Ω—Ç–∞–º–∏...")
            self.save_feeds_to_file()

    def save_feeds_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ RSS-–ª–µ–Ω—Ç—ã –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.feeds_file, 'w', encoding='utf-8') as f:
                json.dump(self.feeds, f, ensure_ascii=False, indent=2)
            print(f"üíæ RSS-–ª–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.feeds_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è RSS-–ª–µ–Ω—Ç: {e}")

    def add_feed(self, name, url):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é RSS-–ª–µ–Ω—Ç—É"""
        self.feeds[name] = url
        self.save_feeds_to_file()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ RSS-–ª–µ–Ω—Ç–∞: {name}")

    def remove_feed(self, name):
        """–£–¥–∞–ª—è–µ—Ç RSS-–ª–µ–Ω—Ç—É"""
        if name in self.feeds:
            del self.feeds[name]
            self.save_feeds_to_file()
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ RSS-–ª–µ–Ω—Ç–∞: {name}")
        else:
            print(f"‚ùå RSS-–ª–µ–Ω—Ç–∞ {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    def get_feeds_list(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ RSS-–ª–µ–Ω—Ç"""
        return self.feeds

    def fetch_all_news(self, max_items_per_feed=15):
        """–°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –≤—Å–µ—Ö RSS-–ª–µ–Ω—Ç"""
        all_news = []

        for source, url in self.feeds.items():
            try:
                print(f"üì∞ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {source}...")
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
                feed = feedparser.parse(url)
                time.sleep(0.3)

                if not feed.entries:
                    print(f"  ‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –≤ {source}")
                    continue

                items_added = 0
                for entry in feed.entries[:max_items_per_feed]:
                    try:
                        title = getattr(entry, 'title', '').strip()
                        if not title:
                            continue

                        news_item = {
                            'source': source,
                            'title': title,
                            'link': getattr(entry, 'link', ''),
                            'published': getattr(entry, 'published', ''),
                            'summary': getattr(entry, 'summary', '')[:200],
                            'timestamp': datetime.now()
                        }

                        all_news.append(news_item)
                        items_added += 1

                    except Exception:
                        continue

                if items_added > 0:
                    print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {items_added} –Ω–æ–≤–æ—Å—Ç–µ–π")
                else:
                    print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ {source}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ {source}: {e}")
                continue

        news_df = pd.DataFrame(all_news)
        if not news_df.empty:
            news_df = news_df.drop_duplicates(subset=['title']).reset_index(drop=True)

        print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(news_df)}")
        return news_df

# ==================== –ö–õ–ê–°–° –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –û –ê–ö–¶–ò–Ø–• ====================
class StockDataCollector:
    def __init__(self):
        self.base_url = "https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities"

    def get_stock_prices(self, tickers, days=60):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ü–∏—è—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        stock_data = {}
        successful_downloads = 0

        for ticker in tickers:
            try:
                url = f"{self.base_url}/{ticker}/candles.json"
                from_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')

                params = {
                    'from': from_date,
                    'till': datetime.now().strftime('%Y-%m-%d'),
                    'interval': 24
                }

                response = requests.get(url, params=params, timeout=15)
                if response.status_code == 200:
                    data = response.json()
                    candles = data.get('candles', {}).get('data', [])

                    if candles:
                        dates = []
                        prices = []

                        for candle in candles:
                            date_str = candle[6]
                            close_price = candle[5]
                            if date_str and close_price:
                                dates.append(date_str)
                                prices.append(float(close_price))

                        if len(prices) >= 10:
                            series = pd.Series(prices, index=dates)
                            stock_data[ticker] = series
                            successful_downloads += 1

                time.sleep(0.2)

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {ticker}: {e}")
                continue

        print(f"üìà –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {successful_downloads} —Ç–∏–∫–µ—Ä–æ–≤")

        if stock_data:
            prices_df = pd.DataFrame(stock_data)
            prices_df = prices_df.ffill().bfill()
            prices_df = prices_df.dropna(axis=1, thresh=len(prices_df) * 0.7)
            return prices_df
        else:
            print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            return self.create_test_data(tickers, days)

    def create_test_data(self, tickers, days):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        dates = pd.date_range(end=datetime.now(), periods=days, freq='D')

        base_prices = {
            'SBER': 250, 'GAZP': 160, 'LKOH': 5800, 'GMKN': 25000, 'NLMK': 180,
            'MTSS': 270, 'ROSN': 420, 'TATN': 380, 'VTBR': 0.03, 'MOEX': 150,
            'ALRS': 450, 'CHMK': 50, 'MTLR': 700, 'TRNFP': 150000,
            'FIVE': 2100, 'DSKY': 600, 'LNTA': 2000, 'OZON': 2200,
            'POLY': 700, 'RGSS': 300, 'YNDX': 2900,
            'GCHE': 1500, 'UPRO': 20, 'WUSH': 5,
            'RTKM': 70, 'MGNT': 4500,
            'PHOR': 8000, 'AKRN': 6500, 'ODVA': 200,
            'FEES': 20, 'HYDR': 1, 'IRAO': 3,
            'PIKK': 1100, 'LSRG': 800, 'UNAC': 500,
            'AFLT': 40, 'NMTP': 300, 'TRMK': 1500
        }

        prices_df = pd.DataFrame(index=dates)
        np.random.seed(42)

        for ticker in tickers:
            base_price = base_prices.get(ticker, 100)
            trend = np.random.choice([-0.001, 0, 0.001, 0.002])
            volatility = 0.02 + np.random.random() * 0.03
            returns = np.random.normal(trend, volatility, days)

            prices = [base_price]
            for ret in returns[1:]:
                new_price = prices[-1] * (1 + ret)
                prices.append(max(new_price, 0.01))

            prices_df[ticker] = prices

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤")
        return prices_df

# ==================== –ö–õ–ê–°–° –ê–ù–ê–õ–ò–ó–ê –ù–û–í–û–°–¢–ï–ô ====================
class NewsAnalyzer:
    def __init__(self):
        self.sector_keywords = self._build_sector_keywords()
        self.sentiment_words = self._build_sentiment_lexicon()

    def _build_sector_keywords(self):
        return {
            '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞': ['–Ω–µ—Ñ—Ç—å', '–≥–∞–∑', '–Ω–µ—Ñ—Ç–µ–≥–∞–∑', '—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫', '–Ω–µ—Ñ—Ç—è–Ω–æ–π', '–≥–∞–∑–æ–≤—ã–π', '–Ω–µ—Ñ—Ç–µ–¥–æ–±—ã—á–∞'],
            '–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–π': ['–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç', '–∑–∞–≤–æ–¥', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤', '–∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω', '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω'],
            '–ë–∞–∑–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã': ['–º–µ—Ç–∞–ª–ª', '—Å—Ç–∞–ª—å', '–Ω–∏–∫–µ–ª—å', '–∞–ª—é–º–∏–Ω', '–º–µ–¥—å', '—Ä—É–¥', '–≥–æ—Ä–Ω–æ–¥–æ–±—ã–≤–∞—é—â'],
            '–†–æ–∑–Ω–∏—á–Ω–∞—è –∏ –æ–ø—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è': ['—Ä–∏—Ç–µ–π–ª', '–º–∞–≥–∞–∑–∏–Ω', '—Ç–æ—Ä–≥–æ–≤–ª—è', '—Ä–æ–∑–Ω–∏—á–Ω', '–ø–æ–∫—É–ø', '–ø—Ä–æ–¥–∞–∂', '—Ç–æ–≤–∞—Ä'],
            '–ú–µ–¥–∏—Ü–∏–Ω–∞, —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–∞, –æ—Ö—Ä–∞–Ω–∞ –∑–¥–æ—Ä–æ–≤—å—è': ['—Ñ–∞—Ä–º–∞', '–º–µ–¥–∏—Ü–∏–Ω', '–ª–µ–∫–∞—Ä—Å—Ç–≤', '–ø—Ä–µ–ø–∞—Ä–∞—Ç', '–≤–∏—Ç–∞–º–∏–Ω', '–∑–¥–æ—Ä–æ–≤—å–µ'],
            '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π': ['–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å', '—Å–ø—Ä–æ—Å', '—Ä–æ–∑–Ω–∏—á–Ω', '–ø–æ–∫—É–ø', '—Ç–æ–≤–∞—Ä'],
            '–¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏': ['—Å–≤—è–∑—å', '—Ç–µ–ª–µ–∫–æ–º', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '–º–æ–±–∏–ª—å–Ω', '—Ç–∞—Ä–∏—Ñ', '–∞–±–æ–Ω–µ–Ω—Ç'],
            '–•–∏–º–∏—è –∏ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—è': ['—Ö–∏–º–∏—è', '—É–¥–æ–±—Ä–µ–Ω', '–Ω–µ—Ñ—Ç–µ—Ö–∏–º', '–ø–æ–ª–∏–º–µ—Ä', '–ø–ª–∞—Å—Ç–∏–∫'],
            '–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞': ['—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥', '—ç–Ω–µ—Ä–≥–æ—Å–±—ã—Ç', '—ç–ª–µ–∫—Ç—Ä–æ—Å–µ—Ç', '—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü'],
            '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ': ['—Å—Ç—Ä–æ–∏—Ç–µ–ª—å', '–¥–µ–≤–µ–ª–æ–ø–µ—Ä', '–Ω–µ–¥–≤–∏–∂', '–∂–∏–ª—å–µ', '–∫–≤–∞—Ä—Ç–∏—Ä'],
            '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': ['–∞–≤–∏–∞', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ø–æ—Ä—Ç', '–∞—ç—Ä–æ–ø–æ—Ä—Ç', '–≥—Ä—É–∑', '–ª–æ–≥–∏—Å—Ç–∏–∫']
        }

    def _build_sentiment_lexicon(self):
        return {
            'positive': ['—Ä–æ—Å—Ç', '–≤—ã—Ä–æ—Å', '—É–≤–µ–ª–∏—á–∏–ª', '–ø—Ä–∏–±—ã–ª—å', '–¥–æ—Ö–æ–¥', '—É—Å–ø–µ—Ö', '—Ä–µ–∫–æ—Ä–¥', '—É–ª—É—á—à–µ–Ω–∏–µ', '–ø–æ–∑–∏—Ç–∏–≤'],
            'negative': ['–ø–∞–¥–µ–Ω–∏–µ', '—Å–Ω–∏–∂–µ–Ω', '—É–ø–∞–ª', '—Å–æ–∫—Ä–∞—â–µ–Ω', '—É–±—ã—Ç–æ–∫', '–ø—Ä–æ–±–ª–µ–º', '–∫—Ä–∏–∑–∏—Å', '—Å–ª–∞–±', '–Ω–µ–≥–∞—Ç–∏–≤'],
            'intensifiers': ['–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω', '—Ä–µ–∑–∫', '—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω', '–∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω', '–º–∞—Å—à—Ç–∞–±–Ω']
        }

    def analyze_sentiment(self, text):
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞"""
        if not isinstance(text, str):
            return 0.0

        text_lower = text.lower()
        positive_score = 0
        negative_score = 0

        for word in self.sentiment_words['positive']:
            if word in text_lower:
                positive_score += 1
                for intensifier in self.sentiment_words['intensifiers']:
                    if f"{intensifier} {word}" in text_lower:
                        positive_score += 0.5
                        break

        for word in self.sentiment_words['negative']:
            if word in text_lower:
                negative_score += 1
                for intensifier in self.sentiment_words['intensifiers']:
                    if f"{intensifier} {word}" in text_lower:
                        negative_score += 0.5
                        break

        total_score = positive_score - negative_score
        return max(-1.0, min(1.0, total_score * 0.2))

    def identify_sectors(self, text):
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–µ–∫—Ç–æ—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not isinstance(text, str):
            return []

        text_lower = text.lower()
        sectors_found = []

        for sector, keywords in self.sector_keywords.items():
            for keyword in keywords:
                if keyword in text_lower:
                    sectors_found.append(sector)
                    break

        return sectors_found if sectors_found else ['–û–±—â–∏–µ']

    def predict_sector_sentiment(self, news_df):
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º"""
        sector_sentiments = {sector: [] for sector in RUSSIAN_SECTORS.keys()}

        for _, news in news_df.iterrows():
            title = news['title']
            summary = news.get('summary', '')
            text = f"{title}. {summary}"

            sentiment = self.analyze_sentiment(text)
            sectors = self.identify_sectors(text)

            for sector in sectors:
                if sector in sector_sentiments:
                    sector_sentiments[sector].append(sentiment)

        recommendations = {}
        for sector, sentiments in sector_sentiments.items():
            if sentiments:
                avg_sentiment = np.mean(sentiments)
                recommendation = int(round(avg_sentiment * 5))
                recommendation = max(-5, min(5, recommendation))
            else:
                recommendation = 0

            recommendations[sector] = recommendation

        return recommendations

# ==================== –£–õ–£–ß–®–ï–ù–ù–´–ô –ö–õ–ê–°–° –ò–ò –ú–û–î–ï–õ–ò ====================
class EnhancedStockAIModel:
    def __init__(self, model_path='enhanced_stock_ai_model.joblib'):
        self.model_path = model_path
        self.model = None
        self.probabilistic_model = None
        self.advanced_model = None
        self.scaler = RobustScaler()
        self.imputer = SimpleImputer(strategy='median')
        self.is_trained = False
        self.training_history = []
        self.model_metadata = {}
        self._initialize_model_with_fallback()

    def _initialize_model_with_fallback(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π fallback"""
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò –º–æ–¥–µ–ª–µ–π...")

        if self._try_load_existing_model():
            print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
            return

        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏...")
        self._create_new_models()
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å")

    def _try_load_existing_model(self):
        """–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏"""
        try:
            if not os.path.exists(self.model_path):
                return False

            model_data = joblib.load(self.model_path)
            return self._load_from_dict(model_data)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            return False

    def _load_from_dict(self, model_data):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        try:
            required_keys = ['main_model', 'probabilistic_model', 'advanced_model', 'scaler', 'imputer']
            if not all(key in model_data for key in required_keys):
                return False

            self.model = model_data['main_model']
            self.probabilistic_model = model_data['probabilistic_model']
            self.advanced_model = model_data['advanced_model']
            self.scaler = model_data['scaler']
            self.imputer = model_data['imputer']
            self.is_trained = model_data.get('is_trained', True)
            self.training_history = model_data.get('training_history', [])
            self.model_metadata = model_data.get('model_metadata', {})

            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è: {e}")
            return False

    def _create_new_models(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        try:
            self.model = RandomForestRegressor(
                n_estimators=100,
                max_depth=10,
                min_samples_split=5,
                min_samples_leaf=2,
                random_state=42,
                warm_start=True
            )

            self.probabilistic_model = BayesianRidge(n_iter=200, tol=1e-3)

            self.advanced_model = GradientBoostingRegressor(
                n_estimators=150,
                max_depth=6,
                learning_rate=0.1,
                random_state=42
            )

            self.imputer = SimpleImputer(strategy='median')
            self.scaler = RobustScaler()

            self.is_trained = False
            self.model_metadata = {
                'creation_date': datetime.now().isoformat(),
                'total_training_samples': 0,
                'training_sessions': 0,
                'last_training': None,
                'model_type': 'EnhancedStockAIModel_v8'
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
            self.model = RandomForestRegressor(n_estimators=50, random_state=42)
            self.probabilistic_model = BayesianRidge()
            self.advanced_model = GradientBoostingRegressor(n_estimators=50, random_state=42)
            self.imputer = SimpleImputer(strategy='median')
            self.scaler = RobustScaler()
            self.is_trained = False

    def _clean_features(self, features_dict):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ—Ç NaN –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        cleaned_features = {}
        for ticker, features in features_dict.items():
            try:
                feature_array = np.array(list(features.values()), dtype=np.float64)
                feature_array = np.nan_to_num(feature_array, nan=np.nan, posinf=1e6, neginf=-1e6)

                if not np.any(np.isnan(feature_array)):
                    cleaned_features[ticker] = features
                else:
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω {ticker}: —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è NaN –∑–Ω–∞—á–µ–Ω–∏—è")

            except (ValueError, TypeError) as e:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω {ticker}: –æ—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è - {e}")
                continue

        return cleaned_features

    def calculate_technical_indicators(self, price_series):
        """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        if len(price_series) < 20:
            return {}

        try:
            returns = price_series.pct_change().dropna()
            if len(returns) < 5:
                return {}

            sma_5 = price_series.rolling(5).mean().iloc[-1] if len(price_series) >= 5 else price_series.iloc[-1]
            sma_20 = price_series.rolling(20).mean().iloc[-1] if len(price_series) >= 20 else price_series.iloc[-1]
            sma_50 = price_series.rolling(50).mean().iloc[-1] if len(price_series) >= 50 else sma_20

            delta = price_series.diff()
            gain = (delta.where(delta > 0, 0)).rolling(14).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(14).mean()
            rs = gain / loss
            rsi = 100 - (100 / (1 + rs)).iloc[-1] if not rs.empty and not np.isnan(rs.iloc[-1]) else 50

            volatility_short = returns.tail(10).std() if len(returns) >= 10 else 0.02
            volatility_long = returns.std() if len(returns) >= 20 else 0.02

            momentum_1m = (price_series.iloc[-1] / price_series.iloc[-min(22, len(price_series))] - 1)
            momentum_3m = (price_series.iloc[-1] / price_series.iloc[-min(66, len(price_series))] - 1)

            volatility_ratio = volatility_short / volatility_long if volatility_long > 0 else 1.0
            momentum_ratio = momentum_1m / momentum_3m if momentum_3m != 0 else 1.0
            sma_ratio_5_20 = sma_5 / sma_20 if sma_20 != 0 else 1.0
            sma_ratio_20_50 = sma_20 / sma_50 if sma_50 != 0 else 1.0
            price_vs_sma20 = price_series.iloc[-1] / sma_20 if sma_20 != 0 else 1.0

            return {
                'sma_ratio_5_20': float(sma_ratio_5_20),
                'sma_ratio_20_50': float(sma_ratio_20_50),
                'price_vs_sma20': float(price_vs_sma20),
                'rsi': float(rsi),
                'volatility_ratio': float(volatility_ratio),
                'momentum_1m': float(momentum_1m),
                'momentum_3m': float(momentum_3m),
                'momentum_ratio': float(momentum_ratio),
                'volatility': float(volatility_long),
                'current_price': float(price_series.iloc[-1])
            }

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return {}

    def create_advanced_features(self, prices_df, news_sentiment):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        features = {}

        if prices_df.empty:
            return features

        for ticker in prices_df.columns:
            try:
                if ticker not in prices_df:
                    continue

                price_series = prices_df[ticker].dropna()
                if len(price_series) < 20:
                    continue

                technical_features = self.calculate_technical_indicators(price_series)
                if not technical_features:
                    continue

                sector = self.get_sector_for_ticker(ticker)
                sector_sentiment = news_sentiment.get(sector, 0)

                features[ticker] = {
                    **technical_features,
                    'sector_sentiment': float(sector_sentiment)
                }

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {ticker}: {e}")
                continue

        return self._clean_features(features)

    def get_sector_for_ticker(self, ticker):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —Ç–∏–∫–µ—Ä–∞"""
        for sector, tickers in RUSSIAN_SECTORS.items():
            if ticker in tickers:
                return sector
        return '–û–±—â–∏–µ'

    def prepare_training_data(self, prices_df, news_sentiment_by_date, forecast_days=10):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π NaN"""
        X_basic, X_advanced, y_basic, y_advanced = [], [], [], []

        if prices_df.empty:
            return np.array([]), np.array([]), np.array([]), np.array([])

        current_sentiment = {}
        if news_sentiment_by_date:
            latest_date = max(news_sentiment_by_date.keys())
            current_sentiment = news_sentiment_by_date[latest_date]

        features_dict = self.create_advanced_features(prices_df, current_sentiment)

        if not features_dict:
            print("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            return np.array([]), np.array([]), np.array([]), np.array([])

        for ticker, features in features_dict.items():
            try:
                if features and len(features) > 0:
                    price_series = prices_df[ticker].dropna()
                    if len(price_series) > forecast_days:
                        current_price = price_series.iloc[-1]
                        future_price = price_series.iloc[-forecast_days - 1] if len(price_series) > forecast_days else price_series.iloc[0]
                        actual_return = (current_price / future_price - 1)

                        feature_vector = list(features.values())

                        if not any(np.isnan(feature_vector)) and not np.isnan(actual_return):
                            X_basic.append(feature_vector)
                            X_advanced.append(feature_vector)
                            y_basic.append(actual_return)
                            y_advanced.append(actual_return)

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}: {e}")
                continue

        print(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(X_basic)} –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        return (np.array(X_basic), np.array(X_advanced),
                np.array(y_basic), np.array(y_advanced))

    def _safe_fit_transform(self, X, incremental=False):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π NaN"""
        if len(X) == 0:
            return X

        X_imputed = self.imputer.fit_transform(X) if not self.is_trained or not incremental else self.imputer.transform(X)
        if not self.is_trained or not incremental:
            X_scaled = self.scaler.fit_transform(X_imputed)
        else:
            X_scaled = self.scaler.transform(X_imputed)

        return X_scaled

    def train_models(self, prices_df, news_sentiment_by_date, incremental=True):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ NaN"""
        try:
            print("üîÑ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π...")

            if self.model is None:
                self._create_new_models()

            X_basic, X_advanced, y_basic, y_advanced = self.prepare_training_data(
                prices_df, news_sentiment_by_date
            )

            if len(X_basic) < 5:
                print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(X_basic)} –ø—Ä–∏–º–µ—Ä–æ–≤")
                return False

            print(f"üéØ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ {len(X_basic)} –ø—Ä–∏–º–µ—Ä–∞—Ö...")

            try:
                X_basic_processed = self._safe_fit_transform(X_basic, incremental)
                X_advanced_processed = self._safe_fit_transform(X_advanced, incremental)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                return False

            try:
                if self.is_trained and incremental:
                    print("üìö –î–æ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
                    if hasattr(self.model, 'warm_start') and self.model.warm_start:
                        self.model.n_estimators += 30

                    self.model.fit(X_basic_processed, y_basic)
                    self.probabilistic_model.fit(X_basic_processed, y_basic)
                    self.advanced_model.fit(X_advanced_processed, y_advanced)
                else:
                    print("üéì –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
                    self.model.fit(X_basic_processed, y_basic)
                    self.probabilistic_model.fit(X_basic_processed, y_basic)
                    self.advanced_model.fit(X_advanced_processed, y_advanced)

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
                return False

            self.is_trained = True
            self._update_training_metadata(len(X_basic))
            self._save_models()

            avg_return = np.mean(y_advanced) if len(y_advanced) > 0 else 0
            print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {avg_return:.4f}")
            return True

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            traceback.print_exc()
            return False

    def _update_training_metadata(self, new_samples_count):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è"""
        current_total = self.model_metadata.get('total_training_samples', 0)
        self.model_metadata['total_training_samples'] = current_total + new_samples_count
        self.model_metadata['training_sessions'] = self.model_metadata.get('training_sessions', 0) + 1
        self.model_metadata['last_training'] = datetime.now().isoformat()

        self.training_history.append({
            'timestamp': datetime.now().isoformat(),
            'samples': new_samples_count,
            'total_samples': self.model_metadata['total_training_samples']
        })

    def _save_models(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"""
        try:
            models_to_save = {
                'main_model': self.model,
                'probabilistic_model': self.probabilistic_model,
                'advanced_model': self.advanced_model,
                'scaler': self.scaler,
                'imputer': self.imputer,
                'is_trained': self.is_trained,
                'training_history': self.training_history,
                'model_metadata': self.model_metadata
            }

            joblib.dump(models_to_save, self.model_path)
            print("üíæ –ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
            return False

    def predict_returns(self, prices_df, news_sentiment):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        if not self.is_trained or self.advanced_model is None:
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
            return {}

        features_dict = self.create_advanced_features(prices_df, news_sentiment)

        predictions = {}
        for ticker, features in features_dict.items():
            try:
                if features:
                    feature_vector = np.array(list(features.values())).reshape(1, -1)
                    feature_vector_imputed = self.imputer.transform(feature_vector)
                    feature_vector_scaled = self.scaler.transform(feature_vector_imputed)
                    predicted_return = self.advanced_model.predict(feature_vector_scaled)[0]

                    predictions[ticker] = {
                        'predicted_return': float(predicted_return),
                        'confidence': 0.7,
                        'sector': self.get_sector_for_ticker(ticker)
                    }

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è {ticker}: {e}")
                continue

        return predictions

    def optimize_portfolio(self, predictions, prices_df, risk_aversion=1.0):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
        tickers = [t for t in predictions.keys() if t in prices_df.columns]
        if len(tickers) < 2:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
            return self._get_equal_weights(tickers)

        try:
            returns_data = prices_df[tickers].pct_change().dropna()
            if len(returns_data) < 10:
                return self._get_equal_weights(tickers)

            cov_matrix = returns_data.cov().values * 252
            expected_returns = np.array([predictions[t]['predicted_return'] for t in tickers])

            def objective(weights):
                portfolio_return = np.sum(weights * expected_returns)
                portfolio_risk = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))
                sharpe_ratio = portfolio_return / (portfolio_risk + 1e-8)
                return -sharpe_ratio

            constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1})
            bounds = [(0, 0.3) for _ in range(len(tickers))]
            initial_weights = np.array([1.0 / len(tickers)] * len(tickers))

            result = minimize(
                objective, initial_weights,
                method='SLSQP', bounds=bounds, constraints=constraints,
                options={'maxiter': 100}
            )

            if result.success:
                weights = {ticker: weight for ticker, weight in zip(tickers, result.x) if weight > 0.01}
                total = sum(weights.values())
                if total > 0:
                    weights = {k: v / total for k, v in weights.items()}
                    print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤—ã–±—Ä–∞–Ω–æ {len(weights)} –∞–∫—Ç–∏–≤–æ–≤")
                    return weights

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")

        return self._get_proportional_weights(predictions, tickers)

    def _get_equal_weights(self, tickers):
        """–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"""
        n = len(tickers)
        return {ticker: 1.0 / n for ticker in tickers} if n > 0 else {}

    def _get_proportional_weights(self, predictions, tickers):
        """–ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ–∂–∏–¥–∞–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
        positive_returns = {t: max(0.01, predictions[t]['predicted_return']) for t in tickers}
        total_positive = sum(positive_returns.values())
        if total_positive > 0:
            return {t: r / total_positive for t, r in positive_returns.items()}
        else:
            return self._get_equal_weights(tickers)

    def get_model_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏"""
        return {
            'is_trained': self.is_trained,
            'training_sessions': len(self.training_history),
            'total_samples': self.model_metadata.get('total_training_samples', 0),
            'last_training': self.model_metadata.get('last_training', 'Never')
        }

# ==================== –ö–õ–ê–°–° –í–ò–†–¢–£–ê–õ–¨–ù–û–ì–û –ü–û–†–¢–§–ï–õ–Ø ====================
class VirtualPortfolio:
    def __init__(self, initial_cash=10000):
        self.initial_cash = initial_cash
        self.cash = initial_cash
        self.positions = {}
        self.transaction_history = []
        self.portfolio_file = 'portfolio.json'
        self.load_portfolio()

    def load_portfolio(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.portfolio_file):
            try:
                with open(self.portfolio_file, 'r') as f:
                    data = json.load(f)
                    self.cash = data.get('cash', self.initial_cash)
                    self.positions = data.get('positions', {})
                print("‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")

    def save_portfolio(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                'cash': self.cash,
                'positions': self.positions,
                'last_updated': datetime.now().isoformat()
            }
            with open(self.portfolio_file, 'w') as f:
                json.dump(data, f, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")

    def execute_trade(self, sector, ticker, action, price, quantity):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        try:
            if quantity <= 0:
                return False

            cost = price * quantity

            if action == 'BUY':
                if self.cash >= cost:
                    self.cash -= cost
                    if ticker in self.positions:
                        total_quantity = self.positions[ticker]['quantity'] + quantity
                        total_cost = (self.positions[ticker]['avg_price'] * self.positions[ticker]['quantity']) + cost
                        self.positions[ticker]['avg_price'] = total_cost / total_quantity
                        self.positions[ticker]['quantity'] = total_quantity
                    else:
                        self.positions[ticker] = {
                            'quantity': quantity,
                            'avg_price': price,
                            'sector': sector
                        }

                    self.transaction_history.append({
                        'timestamp': datetime.now(),
                        'sector': sector,
                        'ticker': ticker,
                        'action': action,
                        'quantity': quantity,
                        'price': price,
                        'total': cost
                    })
                    self.save_portfolio()
                    return True

            elif action == 'SELL':
                if ticker in self.positions and self.positions[ticker]['quantity'] >= quantity:
                    self.cash += cost
                    self.positions[ticker]['quantity'] -= quantity

                    if self.positions[ticker]['quantity'] == 0:
                        del self.positions[ticker]

                    self.transaction_history.append({
                        'timestamp': datetime.now(),
                        'sector': sector,
                        'ticker': ticker,
                        'action': action,
                        'quantity': quantity,
                        'price': price,
                        'total': cost
                    })
                    self.save_portfolio()
                    return True

            return False

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            return False

    def get_portfolio_value(self, current_prices):
        """–†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        total_value = self.cash

        for ticker, position in self.positions.items():
            if ticker in current_prices:
                total_value += current_prices[ticker] * position['quantity']

        return total_value

    def rebalance_portfolio(self, target_weights, current_prices, max_position_size=0.3):
        """–†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ü–µ–ª–µ–≤—ã–º –≤–µ—Å–∞–º"""
        total_value = self.get_portfolio_value(current_prices)
        if total_value == 0 or not target_weights:
            return []

        executed_trades = []
        transaction_cost = 0.001

        for ticker in list(self.positions.keys()):
            if ticker in current_prices and current_prices[ticker] > 0:
                current_quantity = self.positions[ticker]['quantity']
                current_value = current_quantity * current_prices[ticker]
                current_weight = current_value / total_value
                target_weight = target_weights.get(ticker, 0)

                if current_weight > target_weight * 1.05:
                    target_value = target_weight * total_value
                    sell_value = current_value - target_value
                    sell_quantity = int(sell_value / current_prices[ticker])

                    if sell_quantity > 0 and sell_quantity <= current_quantity:
                        success = self.execute_trade(
                            self.positions[ticker].get('sector', '–û–±—â–∏–µ'),
                            ticker, 'SELL', current_prices[ticker], sell_quantity
                        )
                        if success:
                            executed_trades.append(f"SELL {ticker} {sell_quantity} —à—Ç")

        for ticker, target_weight in target_weights.items():
            if target_weight > 0 and ticker in current_prices and current_prices[ticker] > 0:
                current_quantity = self.positions.get(ticker, {}).get('quantity', 0)
                current_value = current_quantity * current_prices[ticker]
                current_weight = current_value / total_value

                if current_weight < target_weight * 0.95:
                    target_value = target_weight * total_value
                    buy_value = target_value - current_value
                    available_cash = self.cash / (1 + transaction_cost)
                    actual_buy_value = min(buy_value, available_cash)
                    buy_quantity = int(actual_buy_value / current_prices[ticker])

                    if buy_quantity > 0:
                        sector = next((s for s, t in RUSSIAN_SECTORS.items() if ticker in t), '–û–±—â–∏–µ')
                        success = self.execute_trade(
                            sector, ticker, 'BUY', current_prices[ticker], buy_quantity
                        )
                        if success:
                            executed_trades.append(f"BUY {ticker} {buy_quantity} —à—Ç")

        return executed_trades

# ==================== –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–° ====================
app = Flask(__name__)

class WebInterface:
    def __init__(self):
        self.current_recommendations = {}
        self.news_items = []
        self.portfolio_value = 0
        self.is_running = True
        self.portfolio_weights = {}
        self.model_info = {}

    def update_data(self, recommendations, news_df, portfolio_value, portfolio_weights=None, model_info=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        self.current_recommendations = recommendations
        self.news_items = news_df.to_dict('records') if not news_df.empty else []
        self.portfolio_value = portfolio_value
        self.portfolio_weights = portfolio_weights or {}
        self.model_info = model_info or {}

    def get_html_template(self):
        """HTML —à–∞–±–ª–æ–Ω –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        return '''
        <!DOCTYPE html>
        <html>
        <head>
            <title>–ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π —Å –ò–ò</title>
            <meta charset="UTF-8">
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
                .container { max-width: 1400px; margin: 0 auto; }
                .header { background: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; }
                .recommendations { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 15px; margin-bottom: 20px; }
                .sector-card { background: white; padding: 15px; border-radius: 8px; border-left: 5px solid #ddd; }
                .positive { border-left-color: #4CAF50 !important; background: #f1f8e9 !important; }
                .negative { border-left-color: #f44336 !important; background: #ffebee !important; }
                .neutral { border-left-color: #2196F3 !important; background: #e3f2fd !important; }
                .news-item { background: white; padding: 15px; margin-bottom: 10px; border-radius: 8px; border-left: 4px solid #2196F3; }
                .news-new { background: #e3f2fd !important; border-left-color: #FF9800 !important; }
                .controls { background: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; }
                .btn { padding: 10px 20px; background: #2196F3; color: white; border: none; border-radius: 5px; cursor: pointer; margin: 5px; }
                .btn-stop { background: #f44336; }
                .portfolio { background: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; }
                .weights-table { width: 100%; border-collapse: collapse; margin-top: 10px; }
                .weights-table th, .weights-table td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
                .weights-table th { background: #f5f5f5; }
                .model-info { background: #e8f5e8; padding: 15px; border-radius: 8px; margin: 10px 0; }
                .profit-positive { color: #4CAF50; font-weight: bold; }
                .profit-negative { color: #f44336; font-weight: bold; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>ü§ñ –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π —Å –ò–ò</h1>
                    <p>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {{ current_time }}</p>
                </div>

                <div class="controls">
                    <button class="btn" onclick="location.reload()">–û–±–Ω–æ–≤–∏—Ç—å</button>
                    <button class="btn btn-stop" onclick="stopProgram()">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É</button>
                </div>

                <div class="portfolio">
                    <h2>üíº –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å</h2>
                    <p><strong>–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {{ "‚ÇΩ{:,.2f}".format(portfolio_value) }}</p>
                    {% set profit = portfolio_value - 10000 %}
                    {% set profit_percent = (portfolio_value / 10000 - 1) * 100 %}
                    <p><strong>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</strong> 
                        <span class="{{ 'profit-positive' if profit >= 0 else 'profit-negative' }}">
                            {{ "‚ÇΩ{:,.2f}".format(profit) }} ({{ "{:.2f}%".format(profit_percent) }})
                        </span>
                    </p>

                    {% if portfolio_weights %}
                    <h3>üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è:</h3>
                    <table class="weights-table">
                        <tr><th>–¢–∏–∫–µ—Ä</th><th>–í–µ—Å</th><th>–î–µ–π—Å—Ç–≤–∏–µ</th></tr>
                        {% for ticker, weight in portfolio_weights.items() %}
                        <tr>
                            <td>{{ ticker }}</td>
                            <td>{{ "{:.1f}%".format(weight * 100) }}</td>
                            <td>
                                {% if weight > 0.1 %}üü¢ –°–∏–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
                                {% elif weight > 0.05 %}üü¢ –ü–æ–∫—É–ø–∫–∞  
                                {% elif weight > 0.02 %}üü° –£–¥–µ—Ä–∂–∞–Ω–∏–µ
                                {% else %}üî¥ –ü—Ä–æ–¥–∞–∂–∞{% endif %}
                            </td>
                        </tr>
                        {% endfor %}
                    </table>
                    {% endif %}
                </div>

                {% if model_info %}
                <div class="model-info">
                    <h3>ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏</h3>
                    <p>–û–±—É—á–µ–Ω–∏–π: {{ model_info.training_sessions }}, –ü—Ä–∏–º–µ—Ä–æ–≤: {{ model_info.total_samples }}</p>
                    <p>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ: {{ model_info.last_training }}</p>
                </div>
                {% endif %}

                <h2>üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º</h2>
                <div class="recommendations">
                    {% for sector, rec in recommendations.items() %}
                    <div class="sector-card {{ 'positive' if rec > 1 else 'negative' if rec < -1 else 'neutral' }}">
                        <h3>{{ sector }}</h3>
                        <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> {{ rec }}/5</p>
                        <p><em>{{ get_recommendation_text(rec) }}</em></p>
                    </div>
                    {% endfor %}
                </div>

                <h2>üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏</h2>
                <div id="news">
                    {% for news in news_items %}
                    <div class="news-item {{ 'news-new' if is_new_news(news.timestamp) else '' }}">
                        <h4>{{ news.title }}</h4>
                        <p><strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> {{ news.source }} | <strong>–î–∞—Ç–∞:</strong> {{ news.published }}</p>
                        <p>{{ news.summary[:200] }}{% if news.summary|length > 200 %}...{% endif %}</p>
                    </div>
                    {% endfor %}
                </div>
            </div>

            <script>
                function stopProgram() {
                    fetch('/stop', { method: 'POST' })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                alert('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...');
                            }
                        });
                }

                setTimeout(() => location.reload(), 300000);
            </script>
        </body>
        </html>
        '''

    def run_server(self, host='0.0.0.0', port=5000):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""

        @app.route('/')
        def index():
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            def get_recommendation_text(rec):
                if rec >= 3:
                    return '–°–∏–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞'
                elif rec >= 1:
                    return '–£–º–µ—Ä–µ–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞'
                elif rec == 0:
                    return '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ'
                elif rec >= -2:
                    return '–£–º–µ—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞'
                else:
                    return '–°–∏–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞'

            def is_new_news(timestamp):
                if isinstance(timestamp, str):
                    try:
                        news_time = datetime.fromisoformat(timestamp.replace('Z', ''))
                    except:
                        return False
                else:
                    news_time = timestamp
                return (datetime.now() - news_time).total_seconds() < 3600

            template = self.get_html_template()
            return render_template_string(
                template,
                recommendations=self.current_recommendations,
                news_items=self.news_items[-15:],
                current_time=current_time,
                portfolio_value=self.portfolio_value,
                portfolio_weights=self.portfolio_weights,
                model_info=self.model_info,
                get_recommendation_text=get_recommendation_text,
                is_new_news=is_new_news
            )

        @app.route('/stop', methods=['POST'])
        def stop_program():
            self.is_running = False
            return {'success': True}

        print(f"üöÄ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://{host}:{port}")
        app.run(host=host, port=port, debug=False, use_reloader=False)

# ==================== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –°–ò–°–¢–ï–ú–´ ====================
class EnhancedStockAnalysisSystem:
    def __init__(self):
        self.news_collector = NewsCollector()
        self.stock_collector = StockDataCollector()
        self.news_analyzer = NewsAnalyzer()
        self.enhanced_ai_model = EnhancedStockAIModel()
        self.portfolio = VirtualPortfolio()
        self.web_interface = WebInterface()

        self.news_backup_file = 'news_backup.csv'
        self.prices_backup_file = 'prices_backup.csv'
        self.recommendations_file = 'RECOM.csv'

    def run_enhanced_analysis_cycle(self):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
        print("\n" + "=" * 60)
        print(f"üîç –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)

        try:
            model_status = self.enhanced_ai_model.get_model_status()
            print(f"ü§ñ –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏: {model_status}")

            print("üì∞ –®–∞–≥ 1: –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π...")
            news_df = self.news_collector.fetch_all_news()

            print("üìä –®–∞–≥ 2: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ü–∏—è—Ö...")
            all_tickers = [ticker for sector_tickers in RUSSIAN_SECTORS.values() for ticker in sector_tickers]
            prices_df = self.stock_collector.get_stock_prices(all_tickers, days=90)

            if prices_df.empty:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ü–∏—è—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª")
                return False

            print("üîç –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π...")
            news_recommendations = self.news_analyzer.predict_sector_sentiment(news_df)

            print("üéØ –®–∞–≥ 4: –û–±—É—á–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–µ–π...")
            news_sentiment_by_date = {datetime.now().date(): news_recommendations}

            incremental_learning = self.enhanced_ai_model.is_trained
            training_successful = self.enhanced_ai_model.train_models(
                prices_df, news_sentiment_by_date, incremental=incremental_learning
            )

            if training_successful:
                training_type = "–¥–æ–æ–±—É—á–µ–Ω–∏–µ" if incremental_learning else "–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"
                print(f"‚úÖ –ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ {training_type}")
            else:
                print("‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

            print("üß† –®–∞–≥ 5: AI –∞–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
            current_prices = prices_df.iloc[-1].to_dict()

            if self.enhanced_ai_model.is_trained:
                ai_predictions = self.enhanced_ai_model.predict_returns(prices_df, news_recommendations)
                optimal_weights = self.enhanced_ai_model.optimize_portfolio(ai_predictions, prices_df)

                if optimal_weights:
                    rebalancing_trades = self.portfolio.rebalance_portfolio(optimal_weights, current_prices)
                    if rebalancing_trades:
                        print(f"‚öñÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {len(rebalancing_trades)}")
                        for trade in rebalancing_trades:
                            print(f"  {trade}")
                else:
                    optimal_weights = {}
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å")
            else:
                optimal_weights = {}
                print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")

            enhanced_recommendations = self._enhance_recommendations_with_optimization(
                news_recommendations, optimal_weights
            )

            portfolio_value = self.portfolio.get_portfolio_value(current_prices)
            self.save_backup_data(news_df, prices_df, enhanced_recommendations)

            model_info = {
                'training_sessions': self.enhanced_ai_model.model_metadata.get('training_sessions', 0),
                'total_samples': self.enhanced_ai_model.model_metadata.get('total_training_samples', 0),
                'last_training': self.enhanced_ai_model.model_metadata.get('last_training', 'Never')
            }

            self.web_interface.update_data(
                enhanced_recommendations, news_df, portfolio_value, optimal_weights, model_info
            )

            self._print_enhanced_results(enhanced_recommendations, optimal_weights, portfolio_value)

            return True

        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            traceback.print_exc()
            return False

    def _enhance_recommendations_with_optimization(self, news_recommendations, optimal_weights):
        """–£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        enhanced_recommendations = news_recommendations.copy()

        if optimal_weights:
            sector_weights = {}
            for ticker, weight in optimal_weights.items():
                sector = self.enhanced_ai_model.get_sector_for_ticker(ticker)
                if sector not in sector_weights:
                    sector_weights[sector] = 0
                sector_weights[sector] += weight

            if sector_weights:
                max_weight = max(sector_weights.values())
                for sector in enhanced_recommendations:
                    weight = sector_weights.get(sector, 0)
                    if max_weight > 0:
                        optimization_score = (weight / max_weight) * 10 - 5
                        enhanced_recommendations[sector] = int(
                            0.4 * enhanced_recommendations[sector] + 0.6 * optimization_score
                        )
                        enhanced_recommendations[sector] = max(-5, min(5, enhanced_recommendations[sector]))

        return enhanced_recommendations

    def _print_enhanced_results(self, recommendations, portfolio_weights, portfolio_value):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        print("\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        print("-" * 60)

        print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –°–ï–ö–¢–û–†–ê–ú:")
        for sector, rec in sorted(recommendations.items(), key=lambda x: x[1], reverse=True):
            emoji = "üü¢" if rec > 1 else "üî¥" if rec < -1 else "üü°"
            print(f"{emoji} {sector:30} {rec:+2d}/5")

        if portfolio_weights:
            print(f"\nüìä –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:")
            for ticker, weight in sorted(portfolio_weights.items(), key=lambda x: x[1], reverse=True)[:8]:
                print(f"  {ticker:10} {weight * 100:5.1f}%")

        initial_value = 10000
        profit = portfolio_value - initial_value
        profit_percent = (portfolio_value / initial_value - 1) * 100

        print(f"\nüíº –ü–û–†–¢–§–ï–õ–¨: ‚ÇΩ{portfolio_value:,.0f}")
        profit_color = "üü¢" if profit >= 0 else "üî¥"
        print(f"üìà –î–û–•–û–î–ù–û–°–¢–¨: {profit_color} ‚ÇΩ{profit:+,.0f} ({profit_percent:+.2f}%)")

        model_info = self.enhanced_ai_model.model_metadata
        print(f"ü§ñ –ú–û–î–ï–õ–¨: {model_info.get('training_sessions', 0)} –æ–±—É—á–µ–Ω–∏–π, "
              f"{model_info.get('total_training_samples', 0)} –ø—Ä–∏–º–µ—Ä–æ–≤")

        print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")

    def save_backup_data(self, news_df, prices_df, recommendations):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not news_df.empty:
                news_df.to_csv(self.news_backup_file, index=False, encoding='utf-8-sig')

            if not prices_df.empty:
                prices_df.to_csv(self.prices_backup_file, index=False, encoding='utf-8-sig')

            rec_df = pd.DataFrame(list(recommendations.items()), columns=['–°–µ–∫—Ç–æ—Ä', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'])
            rec_df['–î–∞—Ç–∞'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            rec_df.to_csv(self.recommendations_file, index=False, encoding='utf-8-sig')

            print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    def run_continuous_analysis(self, interval_minutes=3):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π —Å –ò–ò...")
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ‚ÇΩ{self.portfolio.initial_cash:,.0f}")

        web_thread = threading.Thread(target=self.web_interface.run_server)
        web_thread.daemon = True
        web_thread.start()

        cycle_count = 0
        while self.web_interface.is_running:
            try:
                success = self.run_enhanced_analysis_cycle()
                cycle_count += 1

                if success:
                    print(f"\n‚ôªÔ∏è –¶–∏–∫–ª {cycle_count} –∑–∞–≤–µ—Ä—à–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ {interval_minutes} –º–∏–Ω—É—Ç...")
                    wait_seconds = interval_minutes * 60
                    for i in range(wait_seconds):
                        if not self.web_interface.is_running:
                            break
                        time.sleep(1)
                else:
                    print("üí§ –û–∂–∏–¥–∞–Ω–∏–µ 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    time.sleep(600)

            except KeyboardInterrupt:
                print("\n‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"üí• –û—à–∏–±–∫–∞: {e}")
                time.sleep(600)

        print("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# ==================== –ó–ê–ü–£–°–ö –ü–†–û–ì–†–ê–ú–ú–´ ====================
if __name__ == "__main__":
    system = EnhancedStockAnalysisSystem()
    system.run_continuous_analysis(interval_minutes=3)